name: Build and Publish
env:
  CONTAINER_ARCHS: linux/amd64,linux/arm64
on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  release:
    types:
      - published
jobs:
  version:
    runs-on: ubuntu-latest
    env:
      RELEASE_TAG: "${{ github.event.release.tag_name }}"
    outputs:
      VERSION: "${{ steps.info.outputs.VERSION }}"
      SHA_TAG: "${{ steps.info.outputs.SHA }}"
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - name: Validate releases are on main (reviewed) branch
        if: github.event_name == 'release'
        run: |
          git fetch origin main:main
          git fetch --all --tags --force
          if ! git merge-base --is-ancestor "$RELEASE_TAG" main; then
            echo "# Invalid release tag [$RELEASE_TAG] - must be on main" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
      - run: |-
          echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT
          echo "SHA=sha-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "### Processing Version [$(cat VERSION)] at sha [$(git rev-parse --short HEAD)]" >> $GITHUB_STEP_SUMMARY
        id: info

  build-and-test:
    needs:
      - version
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install softhsm
        run: brew install softhsm

      - name: Log softhsm
        run: cd /home/linuxbrew/.linuxbrew/Cellar/softhsm/2.6.1/lib/softhsm && ls -l

#      - name: Log softhsm info
#        run: brew info softhsm

      - name: Build and test
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: "${{ env.CONTAINER_ARCHS }}"
          push: false
          target: tester

  test-backend:
    needs:
      - version
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      packages: read
    steps:
      - uses: actions/checkout@v4
      - uses: yokawasa/action-setup-kube-tools@v0.9.2
        with:
          setup-tools: |
            kubectl
            helm
            tilt
          # This should be in sync with the minikube-deployed kube version below
          kubectl: "1.25.5"
          helm: "3.10.3"
          tilt: "0.32.4"
      - run: |
          kustomize version
          tilt version
      - name: Start Minikube
        id: minikube
        uses: medyagh/setup-minikube@latest
        with:
          minikube-version: 1.28.0
          # This should be in sync with the setup-tools version above
          kubernetes-version: 1.25.5
      - name: Get cluster versions
        run: |-
          kubectl version
          kubectl get pods -A
      - name: Run Tiltfile
        env:
          TEST_SCRIPT: .github/workflows/roundtrip/wait-and-test.sh
        run: |-
          tilt ci

  ci:
    if: always()
    needs:
      - build-and-test
      - test-backend
      - version
    runs-on: ubuntu-latest
    steps:
      - name: Check version step
        if: ${{ needs.version.result == 'failure' }}
        run: exit 1
      - name: Check test-backend step
        if: ${{ needs.test-backend.result == 'failure' }}
        run: exit 1
      - name: Check build-and-test step
        if: ${{ needs.build-and-test.result == 'failure' }}
        run: exit 1

  tag:
    if: github.event_name == 'push'
    needs:
      - ci
    runs-on: ubuntu-22.04
    outputs:
      TAG: "${{ steps.tag-rel.outputs.tag }}"
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: "0"
      - uses: anothrNick/github-tag-action@1.67.0
        id: tag-rel
        env:
          DEFAULT_BUMP: false
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
      - uses: ncipollo/release-action@v1
        if: steps.tag-rel.outputs.new_tag
        with:
          tag: ${{ steps.tag-rel.outputs.new_tag }}
          generateReleaseNotes: true
          token: ${{ secrets.GITHUB_TOKEN }}

  build-and-push:
    # This lets the event fire on manual releases, which do not have a tag event,
    # and push events AFTER a successful tag event. `always` is required because
    # in manual releases, tag will not run.
    if: >-
      always() &&
      contains(fromJSON('["push", "release"]'), github.event_name) &&
      contains(needs.*.result, 'success') && !contains(needs.*.result, 'failure')
    needs:
      - ci
      - version
      - tag
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/opentdf/gokas
          tags: |
            type=semver,pattern={{version}},value=${{ needs.version.outputs.VERSION }}
            type=semver,pattern={{version}},value=${{ needs.version.outputs.VERSION }},suffix=-${{ needs.tag.outputs.TAG || github.event.release.tag_name || needs.version.outputs.SHA_TAG }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: "${{ env.CONTAINER_ARCHS }}"
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
