name: SonarCloud
on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  gotest:
    name: 'Generate Golang Test Reports'
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:

      - name: 'Checkout repo'
        uses: actions/checkout@v3

      - name: 'Setup Go'
        uses: actions/setup-go@v3
        with:
          go-version: '${{ inputs.go-version }}'
          cache: true

      - name: 'Generate Golang Test Reports'
        run: go test -v -coverprofile coverage.out -json ./... | tee coverage.json

      - name: 'Archive Golang Test Results'
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: coverage.*
          retention-days: 1

  sonarcloud:
    name: 'SonarCloud'
    runs-on: ubuntu-latest
    needs: [gotest]
    permissions:
      contents: read

    steps:
      - uses: actions/setup-go@v3
      - name: 'Checkout repo'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 'Download Code Coverage Report'
        uses: actions/download-artifact@v3
        with:
          name: code-coverage-report

      - name: 'SonarCloud Scan'
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.organization=opentdf
            -Dsonar.projectKey=opentdf_backend-go
            -Dsonar.go.coverage.reportPaths=coverage.out
            -Dsonar.go.tests.reportPaths=coverage.json
            -Dsonar.sources=.
            -Dsonar.test.exclusions=**/*_test.go,**/mock_*.go,cmd/*.go
            -Dsonar.tests=.
            -Dsonar.verbose=true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  coverage:
    name: 'Coverage'
    runs-on: ubuntu-latest
    needs: [sonarcloud]
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3

      - name: generate test coverage
        run: go test ./... -coverprofile=./cover.out -covermode=atomic -coverpkg=./...

      - name: check test coverage
        uses: vladopajic/go-test-coverage@v2
        with:
          # Configure action using config file (option 1)
          config: ./.testcoverage.yml

          # Configure action by specifying input parameters individually (option 2).
          # If you are using config file you shouldn't use these parameters.
          profile: cover.out
          local-prefix: github.com/org/project
          threshold-file: 80
          threshold-package: 80
          threshold-total: 95